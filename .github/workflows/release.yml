name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

  # Nix build and Cachix caching for releases
  nix-build-cache:
    name: Nix Build and Cache
    needs: [clippy, test]
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-substituters = https://git-plumber.cachix.org
            extra-trusted-public-keys = git-plumber.cachix.org-1:A40lddBYiPFacXEF8iHiiOkuJSHBw2D5IeIEr98Velg=

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: git-plumber
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build and push to cachix
        run: |
          nix build .#git-plumber --no-link --print-out-paths | cachix push git-plumber

  # Build matrix for multiple platforms
  build:
    name: Build
    needs: [clippy, test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-plumber-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: git-plumber-linux-x86_64-static
            static: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: git-plumber-linux-aarch64-static
            static: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-plumber-linux-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: git-plumber-windows-x86_64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: git-plumber-windows-aarch64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: git-plumber-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: git-plumber-macos-aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools (for static builds)
        if: matrix.static == true
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: ${{ matrix.static == true && '-C target-feature=+crt-static' || '' }}

      - name: Prepare artifact
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/git-plumber.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/git-plumber ${{ matrix.name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  # Create release draft
  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Get tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          name: Release ${{ steps.tag.outputs.TAG_NAME }}
          draft: true
          prerelease: false
          body: |
            ## Release ${{ steps.tag.outputs.TAG_NAME }}

            ### What's Changed
            <!-- Add your release notes here -->

            ### Available binaries
            Choose the appropriate binary for your platform:
            - **Linux x86_64**: `git-plumber-linux-x86_64`
            - **Linux x86_64 (static)**: `git-plumber-linux-x86_64-static` _(fully static, no dependencies)_
            - **Linux ARM64**: `git-plumber-linux-aarch64`
            - **Linux ARM64 (static)**: `git-plumber-linux-aarch64-static` _(fully static, no dependencies)_
            - **Windows x86_64**: `git-plumber-windows-x86_64.exe`
            - **Windows ARM64**: `git-plumber-windows-aarch64.exe`
            - **macOS x86_64**: `git-plumber-macos-x86_64`
            - **macOS ARM64**: `git-plumber-macos-aarch64`

            ### Container Image
            Available at [docker hub](https://hub.docker.com/r/ejiek/git-plumber/tags?name=${{ steps.tag.outputs.TAG_NAME }}) and [ghcr](https://github.com/ejiektpobehuk/git-plumber/pkgs/container/git-plumber) as a minimal Docker image (<1MB) using static binaries on scratch base.
            Supports `x86_64` and `ARM64` architectures.


            ```
            docker run --rm -v $(pwd):/workspace ejiek/git-plumber:${{ steps.tag.outputs.TAG_NAME }}
            ```
            ```
            podman run --rm -v $(pwd):/workspace docker pull ghcr.io/ejiektpobehuk/git-plumber:${{ steps.tag.outputs.TAG_NAME }}
            ```

            ### Crates.io
            Available at [crates.io](https://crates.io/crates/git-plumber) as a Rust crate:

            ```
            cargo install git-plumber
            ```
            To install this specific version, use:
            ```
            cargo install git-plumber --version ${{ steps.tag.outputs.TAG_NAME }}
            ```

            ### Chocolatey (Windows)
            Available at [Chocolatey Community Repository](https://community.chocolatey.org/packages/git-plumber) for Windows users:

            ```
            choco install git-plumber
            ```
            To install this specific version, use:
            ```
            choco install git-plumber --version ${{ steps.tag.outputs.TAG_NAME }}
            ```
          files: |
            artifacts/*/git-plumber-*

  # Manual approval required for publishing
  docker-publish:
    name: Publish Docker Image
    needs: [release]
    runs-on: ubuntu-latest
    environment: publish-container
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download x86_64 static binary
        uses: actions/download-artifact@v4
        with:
          name: git-plumber-linux-x86_64-static
          path: ./amd64

      - name: Download ARM64 static binary
        uses: actions/download-artifact@v4
        with:
          name: git-plumber-linux-aarch64-static
          path: ./arm64

      - name: Prepare binaries for Docker
        run: |
          # Rename to match Docker's TARGETARCH values and simplify names
          mv ./amd64/git-plumber-linux-x86_64-static ./amd64/git-plumber
          mv ./arm64/git-plumber-linux-aarch64-static ./arm64/git-plumber
          chmod +x ./amd64/git-plumber ./arm64/git-plumber

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/git-plumber:latest
            ${{ secrets.DOCKER_USERNAME }}/git-plumber:${{ steps.tag.outputs.TAG_NAME }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.TAG_NAME }}

  crates-publish:
    name: Publish to Crates.io
    needs: [release]
    runs-on: ubuntu-latest
    environment: publish-crate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }}

  chocolatey-publish:
    name: Publish to Chocolatey Community Repository
    needs: [release]
    runs-on: windows-latest
    environment: publish-chocolatey
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: git-plumber-windows-x86_64.exe
          path: ./

      - name: Get tag name
        id: tag
        run: echo "TAG_NAME=${env:GITHUB_REF -replace 'refs/tags/', ''}" >> $env:GITHUB_OUTPUT

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Create Chocolatey package
        run: |
          # Create package directory
          New-Item -ItemType Directory -Path "choco-package" -Force
          New-Item -ItemType Directory -Path "choco-package/tools" -Force

          # Copy binary to tools directory
          Copy-Item "git-plumber-windows-x86_64.exe" -Destination "choco-package/tools/git-plumber.exe"

          # Create nuspec file
          $version = "${{ steps.tag.outputs.TAG_NAME }}" -replace '^v', ''
          $nuspec = @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
            <metadata>
              <id>git-plumber</id>
              <version>$version</version>
              <packageSourceUrl>https://github.com/ejiektpobehuk/git-plumber</packageSourceUrl>
              <owners>ejiektpobehuk</owners>
              <title>Git Plumber</title>
              <authors>ejiektpobehuk</authors>
              <projectUrl>https://github.com/ejiektpobehuk/git-plumber</projectUrl>
              <licenseUrl>https://github.com/ejiektpobehuk/git-plumber/blob/main/LICENSE</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <description>
                 [![asciicast](https://asciinema.org/a/yekhZM8XzNzAq6IAzLuRUBzsr.svg)](https://asciinema.org/a/yekhZM8XzNzAq6IAzLuRUBzsr)

                 **Explore a `.git/` directory and peek into git&apos;s internals from a terminal.**

                 A visual, interactive companion to &quot;Pro Git&quot; Chapter 10 and anyone curious about what&apos;s under git&apos;s hood.

                 Perfect for learning, live experimentation, or just satisfying your curiosity about how git works internally.

                 [![asciicast](https://asciinema.org/a/yekhZM8XzNzAq6IAzLuRUBzsr.svg)](https://asciinema.org/a/yekhZM8XzNzAq6IAzLuRUBzsr)

                 > _🎥 Click above to watch git-plumber in action (asciinema demo)_

                 > **Explore a `.git/` directory and peek into git&apos;s internals from a terminal.**
                 > _A visual, interactive companion to &quot;Pro Git&quot; Chapter 10 and anyone curious about what&apos;s under git&apos;s hood._

                 ---

                 ## What is _git-plumber_?

                 [git-plumber](https://github.com/ejiektpobehuk/git-plumber) is a CLI and TUI application for **exploring the internals of git repositories** in a safe, read-only way.
                 Browse and understand the contents of the `.git/` directory: refs, trees, blobs and more.
                 Demystifying compressed and binary &quot;plumbing&quot; beneath git&apos;s familiar porcelain appearance.

                 Perfect for learning, live experimentation, or just satisfying your curiosity.

                 ### Use cases


                 - **Learning with _[&quot;Pro Git&quot; 10. Git Internals](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain))_**: Fire up `git-plumber` in a test repository and see immediately how every command reshapes your repo&apos;s internals.
                 - **Understanding git storage**: See for yourself how git stores differences between versions — the reason this app was created!

                 ### What _git-plumber_ is not?

                 - **Not** a replacement for everyday git workflow
                 - **Not** a &quot;porcelain&quot; UI like [gitui](https://github.com/extrawurst/gitui) or [lazygit](https://github.com/jesseduffield/lazygit)
                 - **Not** an interface for running plumbing commands, but a worthy alternative to `git cat-file` or `git verify-pack`

                 ---

                 ## Roadmap &amp; Contributions

                 This app is my git learning project.
                 It&apos;s going to be more complete as my knowledge grows.

                 For planned features checkout [issues at GitHub](https://github.com/ejiektpobehuk/git-plumber/issues).

                 **Major goals**:

                 - Navigation hints
                 - Support for all native git files
                 - Clear &quot;unsupported&quot; indicators
                 - Internationalization (i18n)
                 - [git-bug](https://github.com/git-bug/git-bug) support
                 - [jj](https://github.com/jj-vcs/jj) support

                 **PRs/issues welcome — no need to be a git guru!**
                 Beginners and documentation helpers are especially appreciated.
                 If something is unclear, that&apos;s a sign the app can get better: lease [open an issue](https://github.com/ejiektpobehuk/git-plumber/issues/new) or start a discussion!

                 ---

                 ## License

                 [MIT](https://github.com/ejiektpobehuk/git-plumber/blob/main/LICENSE)

                 ---

                 ## Credits &amp; Inspiration

                 - *Pro Git*, [Chapter 10: Git Internals](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain)
                 - [Git pack-format documentation](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain)

                 ---

                 **Not a git management tool.
                 Not for your day-to-day workflow.
                 This is for those who want to see git&apos;s wiring and learn how it all fits together.**

                 🕳️ *Happy plumbing!* 🔧
               </description>
              <releaseNotes>https://github.com/ejiektpobehuk/git-plumber/releases/tag/${{ steps.tag.outputs.TAG_NAME }}</releaseNotes>
              <tags>git cli tui developer-tools education</tags>
            </metadata>
          </package>
          "@
          Set-Content -Path "choco-package/git-plumber.nuspec" -Value $nuspec

          # Create chocolateyInstall.ps1
          $installScript = @"
          `$ErrorActionPreference = 'Stop'
          `$toolsDir = Split-Path -Parent `$MyInvocation.MyCommand.Definition
          `$exePath = Join-Path `$toolsDir 'git-plumber.exe'

          # Create shim for the executable
          Install-BinFile -Name 'git-plumber' -Path `$exePath
          "@
          Set-Content -Path "choco-package/tools/chocolateyInstall.ps1" -Value $installScript

          # Create chocolateyUninstall.ps1
          $uninstallScript = @"
          `$ErrorActionPreference = 'Stop'

          # Remove shim
          Uninstall-BinFile -Name 'git-plumber'
          "@
          Set-Content -Path "choco-package/tools/chocolateyUninstall.ps1" -Value $uninstallScript

      - name: Pack and push Chocolatey package
        run: |
          cd choco-package
          choco pack
          choco apikey --api-key ${{ secrets.CHOCOLATEY_API_KEY }} --source https://push.chocolatey.org/
          choco push git-plumber.*.nupkg --source https://push.chocolatey.org/
